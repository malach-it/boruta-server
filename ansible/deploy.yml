- hosts: localhost
  tasks:
    - name: Add stable bitnami repo
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami

    - name: Add stable jetstack repo
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io

    - name: Create a k8s namespace
      kubernetes.core.k8s:
        api_version: v1
        name: boruta-staging
        kind: Namespace
        state: present

    - name: Install cert-manager helm package
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: 1.11.1
        release_namespace: cert-manager
        create_namespace: true
        values:
          installCRDs: true

            # upgrade looks to be complicated, variable names contain breaking changes
            # the master configuration file - https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
            #
            # - name: Install postgres helm package
            #   kubernetes.core.helm:
            #     name: postgres
            #     chart_ref: bitnami/postgresql
            #     chart_version: "12.2.7"
            #     release_namespace: boruta-staging
            #     values:
            #       global.postgresql.auth.postgresPassword: "{{ postgresql_password }}"
            #       primary.extendedConfiguration: |
            #         max_connections = 1024

    - name: Create libcluster role
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: libcluster-role
            namespace: boruta-staging
          rules:
          - apiGroups: [""]
            resources: ["pods"]
            verbs: ["get", "list", "watch"]

    - name: Create libcluster binding
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: libcluster-bindings
            namespace: boruta-staging
          subjects:
          - kind: ServiceAccount
            name: default
            namespace: boruta-staging
          roleRef:
            kind: Role
            name: libcluster-role
            apiGroup: rbac.authorization.k8s.io

    - name: Create SSL let's encrypt certificate
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-production
          spec:
            acme:
              email: io.pascal.knoth@gmail.com
              server: https://acme-v02.api.letsencrypt.org/directory
              privateKeySecretRef:
                name: boruta-staging-ssl-account-key
              solvers:
              - http01:
                  ingress:
                    class: nginx
                selector:
                  dnsZones:
                  - 'boruta.patatoid.fr'

    - name: Create Boruta Ingress
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: main-ingress
            namespace: boruta-staging
            annotations:
              kubernetes.io/ingress.class: "nginx"
              cert-manager.io/cluster-issuer: letsencrypt-production
            #   nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - host: "{{ gateway_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-gateway
                      port:
                        number: 5000
            - host: "{{ httpbin_sidecar_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-httpbin-sidecar
                      port:
                        number: 5001
            - host: "{{ protected_httpbin_sidecar_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-protected-httpbin-sidecar
                      port:
                        number: 5001
            - host: "{{ oauth_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-oauth
                      port:
                        number: 4001
            - host: "{{ admin_host }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: boruta-admin
                      port:
                        number: 4002
            tls:
              - hosts:
                - "{{ oauth_host }}"
                - "{{ admin_host }}"
                - "{{ gateway_host }}"
                - "{{ httpbin_sidecar_host }}"
                - "{{ protected_httpbin_sidecar_host }}"
                secretName: boruta-staging-cert

    - name: create boruta app ConfigMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: boruta-env
            namespace: boruta-staging
          data:
            SECRET_KEY_BASE: "{{ secret_key_base }}"
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: "{{ postgresql_password }}"
            POSTGRES_DATABASE: boruta
            POSTGRES_HOST: postgres-postgresql
            MAX_LOG_RETENTION_DAYS: "180"
            K8S_NAMESPACE: boruta-staging
            K8S_SELECTOR: app=boruta
            BORUTA_ADMIN_OAUTH_CLIENT_ID: "{{ admin_client_id }}"
            BORUTA_ADMIN_OAUTH_CLIENT_SECRET: "{{ admin_client_secret }}"
            BORUTA_ADMIN_OAUTH_BASE_URL: "{{ oauth_base_url }}"
            BORUTA_ADMIN_EMAIL: "{{ admin_email }}"
            BORUTA_ADMIN_PASSWORD: "{{ admin_password }}"
            BORUTA_ADMIN_HOST: "{{ admin_host }}"
            BORUTA_ADMIN_PORT: "4002"
            BORUTA_ADMIN_BASE_URL: "{{ boruta_base_url }}"
            BORUTA_OAUTH_HOST: "{{ oauth_host }}"
            BORUTA_OAUTH_PORT: "4001"
            BORUTA_OAUTH_BASE_URL: "{{ oauth_base_url }}"
            BORUTA_GATEWAY_PORT: "5000"
            BORUTA_GATEWAY_SIDECAR_PORT: "5001"
            POOL_SIZE: "5"

    - name: Setup boruta auth database
      register: database_setup
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: boruta-auth-setup
            namespace: boruta-staging
          backoffLimit: 3
          spec:
            template:
              spec:
                containers:
                  - image: "ghcr.io/malach-it/boruta-server:master"
                    command: ["/app/bin/boruta"]
                    args: ["eval", "BorutaWeb.Release.setup"]
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                restartPolicy: OnFailure
                imagePullSecrets:
                  - name: dockerconfigjson-github-com

    - name: Setup boruta gateway database
      register: database_setup
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: boruta-gateway-setup
            namespace: boruta-staging
          backoffLimit: 3
          spec:
            template:
              spec:
                containers:
                  - image: "ghcr.io/malach-it/boruta-gateway:master"
                    command: ["/app/bin/boruta_gateway"]
                    args: ["eval", "BorutaGateway.Release.setup"]
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                restartPolicy: OnFailure
                imagePullSecrets:
                  - name: dockerconfigjson-github-com

    - name: Create Boruta logs storage class
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: boruta-logs
          provisioner: csi.scaleway.com
          allowVolumeExpansion: true

    - name: Create Boruta logs persistent volume claim
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: boruta-logs-pvc
            namespace: boruta-staging
          spec:
            storageClassName: boruta-logs
            accessModes:
              - ReadWriteOnce # TODO will cause issues when running on multiple nodes
            resources:
              requests:
                storage: 5Gi

    - name: Get blue/green deployment status
      kubernetes.core.k8s_info:
        kind: Service
        namespace: boruta-staging
        label_selectors:
          - "app=boruta"
      register: boruta_services

    - name: Create Boruta blue/green deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ 'boruta-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-blue' }}"
            namespace: boruta-staging
          spec:
            replicas: 2
            strategy:
              type: Recreate
              rollingUpdate: null
            selector:
              matchLabels:
                deployment: "{{ 'boruta-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-blue' }}"
            template:
              metadata:
                name: boruta
                labels:
                  deployment: "{{ 'boruta-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-blue' }}"
                  app: boruta
              spec:
                volumes:
                  - name: logs
                    persistentVolumeClaim:
                      claimName: boruta-logs-pvc
                containers:
                  - image: "ghcr.io/malach-it/boruta-server:{{ release_tag }}"
                    readinessProbe:
                      httpGet:
                        path: /healthcheck
                        port: 4001
                    env:
                      - name: BORUTA_GATEWAY_CONFIGURATION_PATH
                        value: "./config/example-gateway-configuration.yml"
                    envFrom:
                      - configMapRef:
                          name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                    volumeMounts:
                      - mountPath: "/app/log"
                        name: logs
                imagePullSecrets:
                - name: dockerconfigjson-github-com

    - name: Create httpbin sidecar blue/green deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ 'boruta-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-httpbin-blue' else 'boruta-httpbin-blue' }}"
            namespace: boruta-staging
          spec:
            replicas: 2
            strategy:
              type: Recreate
              rollingUpdate: null
            selector:
              matchLabels:
                deployment: "{{ 'boruta-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-httpbin-blue' else 'boruta-httpbin-blue' }}"
            template:
              metadata:
                name: boruta-httpbin
                labels:
                  deployment: "{{ 'boruta-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-httpbin-blue' else 'boruta-httpbin-blue' }}"
                  app: boruta
              spec:
                volumes:
                  - name: logs
                    persistentVolumeClaim:
                      claimName: boruta-logs-pvc
                containers:
                  - image: "ghcr.io/malach-it/boruta-server:{{ release_tag }}"
                    env:
                      - name: BORUTA_GATEWAY_CONFIGURATION_PATH
                        value: "./config/example-httpbin-configuration.yml"
                    envFrom:
                      - configMapRef:
                          name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                    volumeMounts:
                      - mountPath: "/app/log"
                        name: logs
                imagePullSecrets:
                - name: dockerconfigjson-github-com

    - name: Create protected httpbin sidecar blue/green deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ 'boruta-protected-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-protected-httpbin-blue' else 'boruta-protected-httpbin-blue' }}"
            namespace: boruta-staging
          spec:
            replicas: 2
            strategy:
              type: Recreate
              rollingUpdate: null
            selector:
              matchLabels:
                deployment: "{{ 'boruta-protected-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-protected-httpbin-blue' else 'boruta-protected-httpbin-blue' }}"
            template:
              metadata:
                name: boruta-protected-httpbin
                labels:
                  deployment: "{{ 'boruta-protected-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-protected-httpbin-blue' else 'boruta-protected-httpbin-blue' }}"
                  app: boruta
              spec:
                volumes:
                  - name: logs
                    persistentVolumeClaim:
                      claimName: boruta-logs-pvc
                containers:
                  - image: "ghcr.io/malach-it/boruta-server:{{ release_tag }}"
                    env:
                      - name: BORUTA_GATEWAY_CONFIGURATION_PATH
                        value: "./config/example-protected-httpbin-configuration.yml"
                    envFrom:
                      - configMapRef:
                          name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                    volumeMounts:
                      - mountPath: "/app/log"
                        name: logs
                imagePullSecrets:
                - name: dockerconfigjson-github-com

    - name: Load boruta gateway configuration
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "boruta-gateway-configuration-{{ release_tag }}"
            namespace: boruta-staging
          backoffLimit: 3
          spec:
            ttlSecondsAfterFinished: 864000
            template:
              spec:
                containers:
                  - image: "ghcr.io/malach-it/boruta-server:{{ release_tag }}"
                    command: ["/app/bin/boruta"]
                    args: ["eval", "BorutaGateway.Release.load_configuration"]
                    env:
                      - name: BORUTA_GATEWAY_CONFIGURATION_PATH
                        value: "./config/example-gateway-configuration.yml"
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                restartPolicy: OnFailure
                imagePullSecrets:
                  - name: dockerconfigjson-github-com

    - name: Load httpbin sidecar configuration
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "boruta-httpbin-configuration-{{ release_tag }}"
            namespace: boruta-staging
          backoffLimit: 3
          spec:
            ttlSecondsAfterFinished: 864000
            template:
              spec:
                containers:
                  - image: "ghcr.io/malach-it/boruta-gateway:{{ release_tag }}"
                    command: ["/app/bin/boruta_gateway"]
                    args: ["eval", "BorutaGateway.Release.load_configuration"]
                    env:
                      - name: BORUTA_GATEWAY_CONFIGURATION_PATH
                        value: "./config/example-httpbin-configuration.yml"
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                restartPolicy: OnFailure
                imagePullSecrets:
                  - name: dockerconfigjson-github-com

    - name: Load protected httpbin sidecar configuration
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: "boruta-protected-httpbin-configuration-{{ release_tag }}"
            namespace: boruta-staging
          backoffLimit: 3
          spec:
            ttlSecondsAfterFinished: 864000
            template:
              spec:
                containers:
                  - image: "ghcr.io/malach-it/boruta-gateway:{{ release_tag }}"
                    command: ["/app/bin/boruta_gateway"]
                    args: ["eval", "BorutaGateway.Release.load_configuration"]
                    env:
                      - name: BORUTA_GATEWAY_CONFIGURATION_PATH
                        value: "./config/example-protected-httpbin-configuration.yml"
                    envFrom:
                    - configMapRef:
                        name: boruta-env
                    imagePullPolicy: Always
                    name: boruta
                restartPolicy: OnFailure
                imagePullSecrets:
                  - name: dockerconfigjson-github-com

    - name: Wait for deployment readyness
      shell: "kubectl -n boruta-staging wait --for=condition=Ready po --all -l deployment={{ 'boruta-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-blue' }}"
      retries: 6
      delay: 5
      register: result
      until: result.rc == 0

    - name: Create OAuth Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: boruta-oauth
            namespace: boruta-staging
            labels:
              app: boruta
          spec:
            selector:
              deployment: "{{ 'boruta-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-blue' }}"
            ports:
            - protocol: TCP
              targetPort: 4001
              name: oauth-tcp
              port: 4001

    - name: Create Admin Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: boruta-admin
            namespace: boruta-staging
            labels:
              app: boruta
          spec:
            selector:
              deployment: "{{ 'boruta-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-blue' }}"
            ports:
            - protocol: TCP
              targetPort: 4002
              name: admin-tcp
              port: 4002

    - name: Create Gateway Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: boruta-gateway
            namespace: boruta-staging
            labels:
              app: boruta
          spec:
            selector:
              deployment: "{{ 'boruta-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-blue' }}"
            ports:
            - protocol: TCP
              targetPort: 5000
              name: gateway-tcp
              port: 5000

    - name: Create httpbin sidecar Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: boruta-httpbin-sidecar
            namespace: boruta-staging
            labels:
              app: boruta-httpbin
          spec:
            selector:
              deployment: "{{ 'boruta-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-httpbin-blue' else 'boruta-httpbin-blue' }}"
            ports:
            - protocol: TCP
              targetPort: 5001
              name: httpbin-tcp
              port: 5001

    - name: Create protected httpbin sidecar Service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: boruta-protected-httpbin-sidecar
            namespace: boruta-staging
            labels:
              app: boruta-protected-httpbin
          spec:
            selector:
              deployment: "{{ 'boruta-protected-httpbin-green' if boruta_services.resources[0].spec.selector.deployment == 'boruta-protected-httpbin-blue' else 'boruta-protected-httpbin-blue' }}"
            ports:
            - protocol: TCP
              targetPort: 5001
              name: gateway-tcp
              port: 5001

    - name: Delete Boruta blue/green deployment
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ 'boruta-blue' if boruta_services.resources[0].spec.selector.deployment == 'boruta-blue' else 'boruta-green' }}"
            namespace: boruta-staging
